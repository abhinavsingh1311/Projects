// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ReceivingSystem.Entities;

namespace ReceivingSystem.DAL;

internal partial class eBike_2025Context : DbContext
{
    public eBike_2025Context(DbContextOptions<eBike_2025Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderDetail> ReceiveOrderDetails { get; set; }

    public virtual DbSet<ReturnedOrderDetail> ReturnedOrderDetails { get; set; }

    public virtual DbSet<UnorderedPurchaseItemCart> UnorderedPurchaseItemCarts { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartId).HasName("PK_Part_PartID");

            entity.ToTable("Part");

            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PurchasePrice).HasColumnType("smallmoney");
            entity.Property(e => e.Refundable)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.SellingPrice).HasColumnType("smallmoney");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Parts)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderId).HasName("PK_PurchaseOrder_PurchaseOrderID");

            entity.ToTable("PurchaseOrder");

            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.EmployeeId)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.Notes).HasMaxLength(100);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.SubTotal).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailId).HasName("PK_PurchaseOrderDetail_PurchaseOrderDetailID");

            entity.ToTable("PurchaseOrderDetail");

            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.VendorPartNumber).HasMaxLength(50);

            entity.HasOne(d => d.Part).WithMany(p => p.PurchaseOrderDetails)
                .HasForeignKey(d => d.PartId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderId).HasName("PK_ReceiveOrder_ReceiveOrderID");

            entity.ToTable("ReceiveOrder");

            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");
            entity.Property(e => e.EmployeeId)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.ReceiveOrders)
                .HasForeignKey(d => d.PurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderDetailId).HasName("PK_ReceiveOrderDetail_ReceiveOrderDetailID");

            entity.ToTable("ReceiveOrderDetail");

            entity.Property(e => e.ReceiveOrderDetailId).HasColumnName("ReceiveOrderDetailID");
            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReceiveOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderDetails)
                .HasForeignKey(d => d.ReceiveOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReturnedOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReturnedOrderDetailId).HasName("PK_ReturnedOrderDetail_ReturnOrderDetailID");

            entity.ToTable("ReturnedOrderDetail");

            entity.Property(e => e.ReturnedOrderDetailId).HasColumnName("ReturnedOrderDetailID");
            entity.Property(e => e.ItemDescription).HasMaxLength(50);
            entity.Property(e => e.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");
            entity.Property(e => e.VendorPartNumber).HasMaxLength(50);

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReturnedOrderDetails)
                .HasForeignKey(d => d.PurchaseOrderDetailId)
                .HasConstraintName("FK_ReturnedOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnedOrderDetails)
                .HasForeignKey(d => d.ReceiveOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<UnorderedPurchaseItemCart>(entity =>
        {
            entity.HasKey(e => e.UnorderedItemId).HasName("PK_UnorderedPurchaseItemCart_CartID");

            entity.ToTable("UnorderedPurchaseItemCart");

            entity.Property(e => e.UnorderedItemId).HasColumnName("UnorderedItemID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ReceiveOrderId).HasColumnName("ReceiveOrderID");
            entity.Property(e => e.VendorPartNumber)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.UnorderedPurchaseItemCarts)
                .HasForeignKey(d => d.ReceiveOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnorderedPurchaseItemCart_ReceiveOrder");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorId).HasName("PK_Vendor_VendorID");

            entity.ToTable("Vendor");

            entity.Property(e => e.VendorId).HasColumnName("VendorID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(12);
            entity.Property(e => e.PostalCode)
                .IsRequired()
                .HasMaxLength(6)
                .IsFixedLength();
            entity.Property(e => e.ProvinceId)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("AB")
                .IsFixedLength()
                .HasColumnName("ProvinceID");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}