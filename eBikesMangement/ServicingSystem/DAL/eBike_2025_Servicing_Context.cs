// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ServicingSystem.Entities;

namespace ServicingSystem.DAL;

internal partial class eBike_2025_Servicing_Context : DbContext
{
    public eBike_2025_Servicing_Context(DbContextOptions<eBike_2025_Servicing_Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerVehicle> CustomerVehicles { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobDetail> JobDetails { get; set; }

    public virtual DbSet<JobPart> JobParts { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<StandardJob> StandardJobs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK_Category_CategoryID");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK_Coupon_CouponID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK_Customer_CustomerID");

            entity.Property(e => e.ContactPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.Province).IsFixedLength();
        });

        modelBuilder.Entity<CustomerVehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleIdentification).HasName("PK_CustomerVehicle_VehicleIdentification");

            entity.Property(e => e.VehicleIdentification).IsFixedLength();
            entity.Property(e => e.Make).IsFixedLength();
            entity.Property(e => e.Model).IsFixedLength();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerVehicles).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("PK_Job_JobID");

            entity.Property(e => e.CouponId).HasDefaultValue(0);
            entity.Property(e => e.VehicleIdentification).IsFixedLength();

            entity.HasOne(d => d.VehicleIdentificationNavigation).WithMany(p => p.Jobs).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<JobDetail>(entity =>
        {
            entity.HasKey(e => e.JobDetailId).HasName("PK_JobDetail_JobDetailID");

            entity.Property(e => e.StatusCode)
                .HasDefaultValue("I")
                .IsFixedLength();

            entity.HasOne(d => d.Job).WithMany(p => p.JobDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<JobPart>(entity =>
        {
            entity.HasKey(e => e.JobPartId).HasName("PK_JobPart_JobPartID");

            entity.HasOne(d => d.Job).WithMany(p => p.JobParts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobPart_Jobs_JobID");

            entity.HasOne(d => d.Part).WithMany(p => p.JobParts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobPart_Parts_PartID");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartId).HasName("PK_Part_PartID");

            entity.Property(e => e.Refundable)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<StandardJob>(entity =>
        {
            entity.HasKey(e => e.StandardJobId).HasName("PK_StandardJob_StandardJobID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}